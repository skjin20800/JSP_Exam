package com.jkb.exam.config;

import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.jkb.exam.anno.RequestMapping;
import com.jkb.exam.controller.FrontController;


public class Reflect implements Filter{
	
	
	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		HttpServletRequest req = (HttpServletRequest) request;
		HttpServletResponse resp = (HttpServletResponse) response;

		// /user 파싱하기
		String endPoint = req.getRequestURI().replaceAll(req.getContextPath(),"");
		System.out.println("엔드포인트 : " + endPoint);
		
		FrontController frontController = new FrontController();

		
		Method[] methods = frontController.getClass().getDeclaredMethods(); // 그 파일에 메서드만!!
		
		for (Method method : methods) { // 4바퀴 (join, login, user, hello)
			Annotation annotation = method.getDeclaredAnnotation(RequestMapping.class);
			RequestMapping requestMapping = (RequestMapping) annotation;
	         System.out.println("requestMapping : "+requestMapping.value());//  어노테이션 값 출력
			
			if(requestMapping.value().equals(endPoint)) {
				try {
					String path = (String)method.invoke(frontController);
					RequestDispatcher dis = req.getRequestDispatcher(path);
					dis.forward(req, resp);
				} catch (Exception e) {
					e.printStackTrace();
				}
				break;
			}
		}

		}
	}
		

