package com.jkb.exam.config;

import java.io.IOException;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.util.Enumeration;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.jkb.exam.anno.RequestMapping;
import com.jkb.exam.controller.FrontController;


public class Reflect implements Filter{
	
	private boolean isMatching = false;
	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		HttpServletRequest req = (HttpServletRequest) request;
		HttpServletResponse resp = (HttpServletResponse) response;

		// /user 파싱하기
		String endPoint = req.getRequestURI().replaceAll(req.getContextPath(),"");
		System.out.println("엔드포인트 : " + endPoint);
		
		FrontController frontController = new FrontController();

		Method[] methods = frontController.getClass().getDeclaredMethods(); // 그 파일에 메서드만!!
		
		for (Method method : methods) {
			Annotation annotation = method.getDeclaredAnnotation(RequestMapping.class);
			RequestMapping requestMapping = (RequestMapping) annotation;

			if (requestMapping.value().equals(endPoint)) {
				isMatching = true;
				try {
					Parameter[] params = method.getParameters(); // LoginDto
					String path = null;
					if (params.length != 0) {
						// 해당 dtoInstance를 리플렉션해서 set함수 호출(username, password)
						Object dtoInstance = params[0].getType().newInstance();
						setData(dtoInstance, request); // request에서 적용할 setter값을 전부 dtoInstance에 넣어 DTO로 전달한다.
						path = (String) method.invoke(frontController, dtoInstance);
					} else {
						path = (String) method.invoke(frontController);
					}

					RequestDispatcher dis = request.getRequestDispatcher(path); // 필터를 다시 안탐!!
					dis.forward(request, response);
				} catch (Exception e) {
					e.printStackTrace();
				}
				break;
			}
		}

		if (isMatching == false) {

			response.setContentType("text/html; charset=utf-8");
			PrintWriter out = response.getWriter();
			out.println("잘못된 주소 요청입니다. 404 에러");
			out.flush();
		}
	}

	private <T> void setData(T dtoInstance, HttpServletRequest request) {
		Enumeration<String> keys = request.getParameterNames(); // 크기 : 2 (username, password)
		while (keys.hasMoreElements()) { // 2번 돈다 //다음번 주소가 있는지 체크.
			String key = (String) keys.nextElement(); //keys의 값을 key에담고 다음 keys값을 앞으로 땡겨놓는다
			String methodKey = keyToMethodKey(key); // setUsername

			Method[] methods = dtoInstance.getClass().getDeclaredMethods(); // 5개

			for (Method method : methods) {
				if (method.getName().equals(methodKey)) {
					try {
						method.invoke(dtoInstance, request.getParameter(key)); // String
					} catch (Exception e) {
						try {
							int value = Integer.parseInt(request.getParameter(key));
							method.invoke(dtoInstance, value);
						} catch (Exception e2) {
							e2.printStackTrace();
						}
						System.out.println("신경쓸 필요없는 별거 아닌 int 파싱 문제");
					}
				}
			}
		}
	}

	private String keyToMethodKey(String key) {
		String firstKey = "set";
		String upperKey = key.substring(0, 1).toUpperCase();
		String remainKey = key.substring(1);

		return firstKey + upperKey + remainKey;
	}
	}
		

